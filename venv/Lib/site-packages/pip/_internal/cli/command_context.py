from contextlib import ExitStack, contextmanager
<<<<<<< HEAD
from typing import ContextManager, Generator, TypeVar
=======
from typing import ContextManager, Iterator, TypeVar
>>>>>>> 713bf834585d063a0649dcd4c5599f6ec25df72c

_T = TypeVar("_T", covariant=True)


class CommandContextMixIn:
<<<<<<< HEAD
    def __init__(self) -> None:
=======
    def __init__(self):
        # type: () -> None
>>>>>>> 713bf834585d063a0649dcd4c5599f6ec25df72c
        super().__init__()
        self._in_main_context = False
        self._main_context = ExitStack()

    @contextmanager
<<<<<<< HEAD
    def main_context(self) -> Generator[None, None, None]:
=======
    def main_context(self):
        # type: () -> Iterator[None]
>>>>>>> 713bf834585d063a0649dcd4c5599f6ec25df72c
        assert not self._in_main_context

        self._in_main_context = True
        try:
            with self._main_context:
                yield
        finally:
            self._in_main_context = False

<<<<<<< HEAD
    def enter_context(self, context_provider: ContextManager[_T]) -> _T:
=======
    def enter_context(self, context_provider):
        # type: (ContextManager[_T]) -> _T
>>>>>>> 713bf834585d063a0649dcd4c5599f6ec25df72c
        assert self._in_main_context

        return self._main_context.enter_context(context_provider)
